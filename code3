import numpy as np
import cv2
import time

s1=[]
a=0
b=0
c=0
cap = cv2.VideoCapture("/home/tatarin/Рабочий стол/4.mp4")
print(cap.isOpened())
if cap.isOpened():
    total_frames = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))
    print('total_frames', total_frames)
    selected_frames = []
    ballpos=[]
    cv2.namedWindow('image',cv2.WINDOW_NORMAL)
    cv2.resizeWindow('image', 640,480)
    

    while cap.isOpened():
        ret, frame = cap.read()
        

        
        if ret:
          
            hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
           
            lower_green = np.array([29,86,6])
            upper_green = np.array([64,255,255])

            mask = cv2.inRange(hsv, lower_green, upper_green)
            mask = cv2.erode(mask, None, iterations=2)
            mask = cv2.dilate(mask, None, iterations=2)
            cnts = cv2.findContours(mask.copy(), cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)[-2]
            center = None
            if len(cnts) > 0:
                c = max(cnts, key=cv2.contourArea)
                ((x, y), radius) = cv2.minEnclosingCircle(c)
                M = cv2.moments(c)
                center = (int(M["m10"] / M["m00"]), int(M["m01"] / M["m00"]))
                
                if radius > 10:
                    cv2.circle(frame, (int(x), int(y)), int(radius),(0, 255, 255), 2)
                    cv2.circle(frame, center, 5, (0, 0, 255), -1)
                    cv2.circle(frame, center, int(radius)+5, (255, 0, 255), 3)
            if(center !=None):
                ballpos.append(center)
            
            for i in range(1, len(ballpos)):
                
                if ballpos[i - 1] is None or ballpos[i] is None:
                    continue
                c0=ballpos[i-1]    
                c1=ballpos[i]
                #c1=ballpos[i-2]
                #a=(c3[1]-((c3[0](c2[1]-c1[1])+c2[0]*c1[1]-c1[0]*c2[1])/(c2[0]-c1[0]))/(c3[0]*(c3[0]-c1[0]-c2[0])+c1[0]*c2[0])
                #b=(c2[1]-c1[1])/(c2[0]-c1[0])-a*(c1[0]+c2[0])
                #c=(c2[0]*c1[1]-c1[0]*c2[1])/(c2[0]-c1[0]+a*c1[0]*c2[0]) 
                #for j in range(100):
                #   cv2.point(j,a*j*j+b*j+c)
                s1.append((int(c1[0])-int(c0[0]))+int(c1[0]))
                s1.append((int(c1[1])-int(c0[1]))+int(c1[1]))
                cv2.line(frame, ballpos[i-1], tuple(s1), (0, 0, 255), 3)
                s1=[]
            cv2.imshow('image', frame)
            time.sleep(1)

        if cv2.waitKey(1) & 0xFF == ord('q'):
            
            break
    print('########################################')
    print('total lenght', len(ballpos))
    cap.release()
    cv2.destroyAllWindows()

    selected_frames = ballpos[2:13]
    print('selected_frames', selected_frames)
    x = []
    y = []
    for i in range(len(selected_frames)):
        x.append(selected_frames[i][0])
        y.append(selected_frames[i][1])
    print('x', x)
    print('y', y)
    print("##########################################")
  
